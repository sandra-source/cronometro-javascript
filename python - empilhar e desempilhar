{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "CÃ³pia de Untitled4.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOCE5WLvmYr8V3EtS4EXG+m",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sandra-source/cronometro-javascript/blob/master/python%20-%20empilhar%20e%20desempilhar\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R6BOlMTpUO8y",
        "outputId": "e69a5046-4c27-4798-b4da-f9b98a8e5e05"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "------------------------------------\n",
            "[5]\n",
            "[5, 30]\n",
            "[5, 30, 23]\n",
            "[5, 30, 23, 65]\n",
            "[5, 30, 23, 65, 97]\n",
            "[5, 30, 23, 65, 97, 65]\n",
            "[5, 30, 23, 65, 97, 65, 6]\n",
            "[5, 30, 23, 65, 97, 65, 6, 85]\n",
            "[5, 30, 23, 65, 97, 65, 6, 85, 38]\n",
            "[5, 30, 23, 65, 97, 65, 6, 85, 38, 73]\n",
            "[65, 97, 65, 6, 85, 38, 73]\n"
          ]
        }
      ],
      "source": [
        "pilha = []\n",
        "pilhaPopulada = 5, 30, 23, 65, 97, 65, 6, 85, 38, 73\n",
        "\n",
        "print('------------------------------------')\n",
        "\n",
        "class Pilha:\n",
        "  def __int__(self, empilha, desempilha, exibe):\n",
        "    pass\n",
        "  def empilha():\n",
        "    for i in range(len(pilhaPopulada)):\n",
        "      pilha.append(pilhaPopulada[i])\n",
        "      print(pilha)\n",
        "  def desempilha():\n",
        "    del pilha[0:3]\n",
        "  def exibe():\n",
        "    print(pilha)\n",
        "\n",
        "  empilha()\n",
        "  desempilha()\n",
        "  exibe()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pilha = []\n",
        "pilhaPopulada = 5, 30, 23, 65, 97, 65, 6, 85, 38, 73\n",
        "\n",
        "class Pilha(object):\n",
        "    def init(self):\n",
        "        self.dados = []\n",
        " \n",
        "    def empilha(self):\n",
        "        for i in range(len(pilhaPopulada)):\n",
        "          pilha.append(pilhaPopulada[i])\n",
        " \n",
        "    def desempilha(self):\n",
        "        del pilha[0, 3]\n",
        " \n",
        "    def vazia(self):\n",
        "        print(\"quantidade de elementos da Pilha: \" + len(pilha))\n",
        "\n",
        "p = Pilha()\n",
        "p.empilha()\n",
        "p.desempilha()\n",
        "p.vazia()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "id": "GGRPjbsicMNe",
        "outputId": "a0da1e94-a617-4539-d3ac-a2fd0caff797"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-71-cfce8db90449>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPilha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempilha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdesempilha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvazia\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-71-cfce8db90449>\u001b[0m in \u001b[0;36mdesempilha\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdesempilha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0;32mdel\u001b[0m \u001b[0mpilha\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvazia\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not tuple"
          ]
        }
      ]
    }
  ]
}